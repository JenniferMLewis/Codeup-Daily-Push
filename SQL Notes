-- Is how we make comments in MySQL

-- I want to see the sections in the LIbrary
--the sections are what we may describe as schema, or database.alter

--Case isn't mandatory, BUT is consider good protocol, please use it.

SHOW DATABASES;
--We can see our Databases, remember your Semi-colon, think of it like PHP, you NEED it.

SELECT * FROM mysql.user;
-- Select Everything
-- From database/schema mysql
-- From table user

--How to see what's in a DB
--In CLI, we would change directories into our location (cd), we would list contents (ls)
--In MySQL

USE mysql;
--Command Line Interface (CLI) equivelant cd

SHOW TABLES;
--CLI equivelant ls
--Since we're in mysql db, we can just use
SELECT * FROM user;

-- I got lost in the Library, where am I?
SELECT database();
-- Will return which database you're currently in.

SHOW CREATE DATABSE fruits_db;
-- I want to know details about creations of fruits-db
-- SHOW command
-- the details of the create command
-- for the database (schema) fruits_db

SHOW DATABASES;
USE chipotle;
SHOW TABLES;
--Structure of a MySQL Database:
-- inside the database exists a Schema (databases)
--these databases provide a structure for tables

--Tables:
SELECT * FROM orders LIMIT 5;

-- So what's in a table?
--each cell of data in a table is exactly that: data
--each piece of datum has an inherent type
-- that type defines how it can interact and if it can belong in that field
-- interchangable terms in sq: columns and fields

--Tables in sql have some very specific rules about how they are created:
-- Firstly, they must contain a primary key
-- Null (No entered Value, different from NaN and 0)
-- nan (Not A Number)
-- primary keys have to be unique, can't be null, and there can be one

SHOW CREATE TABLE orders;
--shows command utilised to created that specific table, will show the specific code to create each value
-- signed vs unsigned - the use of the word sign is meaning mathmatically. Unsigned is only 0 to 4,294,967,295 Signed -2,147,483,648 to 2,147,483,647
-- Boolean 0 is False 1 is True. MySQL has no native support for boolean values, it uses TINYINT data type that goes from -128 to 127 and treats 0 as False and 1 as True. Other database management systems will vary in how they ahndle boolean values.

DESCRIBE orders;



-- CRUD
-- Create, Read, Update, Delete
-- DDL: Data Definition Language: Create, Update, Delete
-- DML: Data Manipulations Language: Read! <-- Our bread and butter?!

-- SELECT is the primary read statement that we will be using

-- SELECT (bring me information)
-- __subject__ (field names, computations, * , etc.)
-- FROM (what table do you want this informatoin from is it from a table?)
-- __source__ (either with a dot notation or living inside of a schema ie: database.table or just table)

SHOW DATABASES;

--SELECT (*: every field) FROM the schema named chipotle, and the table named orders inside chipotle.
/* dslkajflskdjf
comments
out
Multiple
Lines */
-- CMD + / Will comment out a line in SQL and Python!
SELECT * FROM chipotle.orders;

-- seclect only specific fields?
SELECT name FROM fruits;
-- more than one?
SELECT id, name FROM fruits;
USE chipotle;
SELECT * FROM orders;

-- Want something specitic??
-- Give me everything in the Fruits table where the name field matches the string Mango
SELECT * FROM fruits WHERE name = 'mange';
-- DISTINCT will give us unique values in a field
SELECT DISTINCT name FROM fruits;
SELECT DISTINCT name, quantity, FROM fruits;
SELECT * FROM fruits WHERE quantity > 2;
SELECT * FROM fruits WHERE quantity >= 2;

/* comparison operators:
= equals
!= Not equal, <> Not equal
< Less than
> Greated than
<= Less than or equal to
>= Greater or and equal to
BETWEEN __value1__ AND __value2__ greater than (up to value2) or equal to value1, AND less than (up to value1) or equal to value2. */

SELECT 'this is some output!';
-- functions like Print()
SELECT 2=2;
-- Will return 1, boolean meaning TRUE
SELECT 2=3;
-- Will return 0, boolean meaning FALSE
SELECT 2+3;
-- Will return SUM of 2 and 3, so 5
SELECT 2=2, 2+3, 2 BETWEEN 3 AND 5;
-- Will return 1 | 5 | 0 <--- Boolean | SUM | boolean

-- aliasing:
SELECT 2=2 AS 'equivalency_demo';
-- Or
SELECT 2=2 AS equivalency_demo;

SELECT name AS fruit_type FROM fruits;
-- Makes a list of fruit_names into the table fruit_type so you don't have to keep referencing the long way

/* Can do More Exercises from SQL if feeling ahead. */

-- % is the wildcard for data entries, not * . So items would be wildcarded like '%vague_idea%'. It would give "This_is_a_vague_idea" or "I_only_have_vague_ideas" or "vague_ideas_not here".

--Clauses:
--Clauses are how we get specifically what we want(usually a single gield or a combination of fields)

-- WHERE: Give me results specifally under X conditions

-- ORDER BY: Sort my results specifally to my needs

-- LIMIT: Only give me some of the results back

-- SHOW me what database/schemas I have available
SHOW DATABASES;
-- USE the chipotle schemas
USE chipotle;
-- SHOW what tables are available inside the chipotle database.
SHOW TABLES;
-- tell me what fields I have inside the orders table.
DESCRIBE orders;

-- A good way to get a preview on our table:
-- LIMIT
SELECT * FROM orders LIMIT 5;
-- Gives a hard stop after the first 5 entries.

-- If I want to narrow down results we can use WHERE
-- WHERE comes at the end of a select statement, and it calls:

-- A few differe ways to use this so far:
-- We need to specify what we want to narrow down.
-- Establish dquivalency : = 
-- LIKE, compare string values
-- BETWEEN, inclusive range
-- inequality operators: <,>,<=,>=
-- NOT EQUAL , != or <>

-- Give me everything in orders
-- specifically, everthis that has a tomato in the item name
SELECT * FROM orders WHERE item_name LIKE '%tomato%';
-- Just the distinct entries with tomato in their name.
SELECT DISTINCT item_name FROM orders WHERE item_name LIKE '%tomato%';


/* STRUCTURE:
SELECT - Do the things, pull the info
WHAT everything: * , some specific fields, some way of sorting data
At a Specific Field (DISTINCT)
FROM - Where this is coming from
Stipulations? Do we want a *clause* to narrow this information down?

Use a numerical comparision:
Give me every choice_description, \  
But only if there was more than 3 ordered */
SELECT choice_description FROM orders WHERE quantity > 3;
--alternatively?
SELECT
choice_description AS choice
FROM orders
WHERE quantity > 3
AND choice_description <> 'nan';

-- Nesting: Can keep nesting, order is in the way it's written so it will run as you want to narrow down if written that way.
SELECT *
FROM orders
WHERE quantity > 2
AND (
item_name LIKE '%tomato%'
OR choice_description LIKE '%rice%'
);

ORDER BY: How we sort our results
SELECT *
FROM orders
Where quantity > 2
AND (
item_name LIKE '%tomato%'
OR choice_description LIKE '%rice%
ORDER BY quantity DESC
);

-- LIMIT and OFFSET. LIMIT is how many items will show up at a time, OFFSET then tells it WHERE in the entries you wan to start.


-- FUNCTIONS:
-- FULL LIST: https://dev.mysql.com/doc/refman/8.0/en/functions.html
__ NOTEABLY, in SQL index count starts at [1] not [0] like Python.

-- CONCAT
-- SELECT CONCAT ('Hello ', "Codeup', '!');
-- CONCAT will combine the values to give you "Hello Codeup!"

-- FUNCTIONS: STRING FUNCTIONS:
SELECT CONCAT('hi', 'leavitt');
SELECT CONCAT('hi', 'leavitt') AS simplegreeting;

-- If I wanted a full name field
-- concatenate first_name withlast_name, add a space between them.
SELECT CONCAT(first_name, ' ', last_name
AS fullname
FROM employees LIMIT 5;

-- substrings:
SELECT SUBSTR('Howdy Leavitt', 2, 6);
-- gives "owdy L"

-- nesting:
SELECT
CONCAT(
SUBSTR(first_name, 1, 1), ' ' , last_name)
FROM employees

-- UPPER and LOWER:
SELECT UPPER (first_name) FROM employees;

-- REPLACE
SELECT REPLACE('Hey $$$$, '$', 'Leavitt');
-- gives Hey LeavittLeavittLeavittLeavitt
SELECT REPLACE('Hey $$$$, '$$$', 'Leavitt');
-- gives Hey Leavitt$

-- Time Functions:
-- Useful for compartion
SELECT NOW();
-- Gives GMT
SELECT UNIXTIMESTAMP(NOW())
-- Gives seconds

-- MATH functions:
-- We an use these within previous clauses for efficiency

SELECT * FROM employees LIMIT 5;
SELECT MIN(emp_no) FROM employees;

SELECT * FROM employees WHERE emp_no = MIN(emp_no);
-- This BREAKS it, we will cover how to handle this later.

-- CASTING: turn one data type into another

USE chipotle;
SELECT * FROM orders LIMIT 5;

-- WHEN utilising CAST, we separate the arguments with AS
-- think about it the same way as aliasing
CAST('5.99' AS FLOAT);

SELECT REPLACE('$5.99', '$', '');

-- Let's nest these to solve our earlier discussed problem:
SELECT item_price FROM orders;
SELECT REPLACE(item_price, '$', '') FROM orders;
SELECT CAST(REPLACE(item_price, '$', '') AS float) FROM orders;


-- GROUP BY: An Introduction to Aggregation

-- select our schema
USE chipotle;
-- look at whats in the table:
SHOW TABLES;
DESCRIBE orders;
-- string types in fields: item_price, choice_description, item_name
-- num types: id (pk), order_id, quantity

-- Previous use-case: DISTINCT
-- Let me get every unique item name in this table of orders
SELECT
DISTINCT item_name
FROM orders;

SELECT
DISTINCT item_name,
quantity
FROM orders;

-- some redundancy here:
-- GROUP BY on its own

SELECT item_name FROM orders GROUP BY item_name;

-- GROUP BY with two columns:
-- note that this is replicant of using DISTINCT with two fields
-- every unique combination of those two fields
SELECT item_name,
quantity
FROM orders 
GROUP BY item_name, quantity;

-- first use-case of aggregative functions 
-- in conjunction with GROUP BY

-- Flexability:
-- When using count inside of your aggregate call,
-- we can use different field names.  It will consistently
-- give you the number of instances the grouped field contains
-- it will be common to see COUNT(*), i.e. count all instances of all fields
SELECT item_name,
COUNT(item_name)
FROM orders 
GROUP BY item_name;

-- Adding complexity with a WHERE clause:
SELECT item_name,
COUNT(item_name)
FROM orders 
WHERE item_name LIKE '%burrito%'
GROUP BY item_name;

-- Adding more:
SELECT item_name,
COUNT(item_name) AS num_orders
FROM orders 
WHERE item_name LIKE '%burrito%'
GROUP BY item_name
HAVING num_orders > 6
ORDER BY num_orders DESC
LIMIT 1;

-- SELECT the thing (what fields we want)
SELECT item_name, item_price,
-- if we are not grouping by a secondary field, what do with it
MAX(quantity) AS max_num_ordered
-- from what table are we pulling from?
FROM orders
-- Do we need a WHERE to narrow scope with a clause?
WHERE item_name LIKE '%veggie%'
-- for all grouped fields, specify order
GROUP BY item_name, item_price
-- do we want to narrow down our aggregated function value with a HAVING?
HAVING max_num_ordered > 1
-- do we have an order to sort by?
ORDER BY max_num_ordered DESC
-- do we have a limit to the number of fields we want?
LIMIT 2;


-- JOIN:
-- INNER joins:
-- Inner Joins will be our default join structure.

SELECT *
-- from users as the left table
FROM users
-- join all fields (*)
JOIN roles
-- how do we want to make that connection?
ON users.role_id = roles.id;

-- How do we select specific fields?
SELECT users.name, roles.name, role_id
-- from users as the left table
FROM users
-- Join all fields(*)
JOIN roles
-- How do we want to make that connections
ON users.role_id = roles.id;

-- How do we select specific fields?
-- WE CAN ALSO ALIAS WHAT WE WANT TO DO WITH SPECIFIC TABLES
SELECT u.name, r.name, role_id
-- from users as the left table
FROM users AS u
-- Join all fields(*)
JOIN roles AS r
-- How do we want to make that connections
ON u.role_id = r.id;

-- LEFT/RIGHT joins?
-- BASIC LEFT JOIN COMMAND

SELECT * 
FROM users u
LEFT JOIN roles r
ON r.id = u.role_id;

-- RIGHT JOIN?
SELECT *
FROM users u
RIGHT JOIN roles r
ON r.id = u.role_id;

/*BIG NOTE: LEft and Right joins are the same thing,
it just depends on what order you put your tables inside of your query
In this case, role is our left table denoted by the first thable refered our FROM command
FOLLOWING JOIN, wather econd table there is our right table */
SELECT * 
FROM roles r 
RIGHT JOIN users u 
ON r.id = u.role_id;

-- Let' explore a different schema:
-- select a new schema using USE
USE world
-- Let's see what tables are in here using SHOW TABLES
-- Looks like city, country, and countrylanguage
SHOW TABLES;

DESCRIBE city;
-- CountryCode appears to link
-- ID is our primary key
-- Other fields: Name, District, Population
SELECT * FROM city LIMIT 2;

DESCRIBE country;
SELECT * FROM country LIMIT 2;

SELECT * FROM countrylanguage LIMIT 2;
-- ALL 3 tables have an association with CountryCode

-- SELECT all fields (from all tables)
SELECT *
-- first table: city
FROM city
-- join it on the country table
JOIN country
-- how do we want to link these two tables?
ON city.CountryCode = country.Code
-- make our second join : attach countrylanguage
JOIN countrylanguage
-- How do we want to associate countrlanguage to country?
ON country.Code = countrylangauge.CountryCode;

-- USING:
-- WE NEED TO USE THER KEYWORD ON WHEN ESTABLISHING EQUIVALENCE BETWEEN TWO TABLES
-- with different foreign/primary key pair value names
-- but: IF they have the same field name, we can elect to use USING()

SELECT *
FROM city
JOIN countrylanguage
USING(CountryCode);



--SUBQUERIES:
/*
SUBQUERIES RETURNING A COLUMN
Find customer ids and total charges for all <customers who have an internet service type of 3.>
*/

-- select * from customer_subscriptions;

select customer_id from customer_subscriptions where internet_service_type_id = 3; 

select customer_id, total_charges
from customer_payments
where customer_id IN ('0023-UYUPN', '0030-FNXPP');

select customer_id, total_charges
from customer_payments
where customer_id IN (select customer_id from customer_subscriptions where internet_service_type_id = 3);


/*
SUBQUERIES RETURNING A SCALAR
Find customer ids, monthly charges and total charges for all <customers whose total charges are greater than the average.>
*/

select avg(total_charges) from customer_payments;

select customer_id, monthly_charges, total_charges
from customer_payments
where total_charges > 2279.73;


select customer_id, monthly_charges, total_charges
from customer_payments
where total_charges > (select avg(total_charges) from customer_payments);

/*
SUBQUERIES RETURNING A TABLE
Find customer_id, average charges, internet service type for all customers. 
*/
 -- inner query returns a table
select pay.customer_id, avg(pay.monthly_charges) as average_charges
from customer_payments pay
group by customer_id
;

-- outer query
select sub.customer_id, sub.internet_service_type_id, ist.internet_service_type
from customer_subscriptions sub
join internet_service_types ist on sub.internet_service_type_id = ist.internet_service_type_id;

/*
select internet_service_type_id, internet_service_type
from internet_service_types;
*/

select pay.customer_id, ist.internet_service_type,
			pay.average_charges
			from (select customer_id, avg(monthly_charges) as average_charges
					from customer_payments
					group by customer_id
					) pay
			join customer_subscriptions sub ON pay.customer_id = sub.customer_id
			join internet_service_types ist on sub.internet_service_type_id = ist.internet_service_type_id;


select pay.customer_id, ist.internet_service_type,
			pay.average_charges
			from (select customer_id, avg(monthly_charges) as average_charges
					from customer_payments
					group by customer_id
					) pay
			join (select customer_id, internet_service_type_id from customer_subscriptions) sub 
						ON pay.customer_id = sub.customer_id
			join (select internet_service_type_id, internet_service_type from internet_service_types) ist 
						on sub.internet_service_type_id = ist.internet_service_type_id;
						
/* LOOK INTO WINDOW FUNCTION NEXT! */

-- CASES STATEMENTS
-- Our means of categorising information
-- base on truthful logic

-- We will:
-- Create conditions
-- Get a result of said conditions
-- These results will go toward an output


USE chipotle;

-- orders is the only table here (no joins! huzzah!)
SELECT * FROM orders LIMIT 5;

SELECT item_name FROM orders WHERE item_name LIKE '%chicken%';

-- 'Picking out from this list:
-- we will grab Chicken Burrito, Chicken Crispy Tacos, and Chicken Soft Tacos
-- we will refer to this demographic as chicken tortilla

Select item_name,
CASE item_name
When 'Chicken Bowl' Then 'chickkybowl'
WHEN 'Chicken Burrito' THEN 'chickkyburrito'
ELSE 'something else'
END AS modified_item_name
FROM orders;
-- CASE does not like WHEN xxx LIKE
-- WORK AROUND:
SELECT COUNT(*),
CASE 
	WHEN item_name IN('Chicken Burrito', 
						'Chicken Crispy Tacos', 
						'Chicken Soft Tacos') THEN 'chicken_type_meat'
	ELSE 'something else'
END AS 'chicken_item_field'
FROM orders
GROUP BY chicken_item_field;

-- IF Statement:
SELECT
item_name,
IF(item_name = 'Chicken Burrito', True, False) AS is_chick_burr
FROM orders;

-- TEMP TABLES:
/* You will *ONLY* have ****WRITE**** Access in your student database, leavitt_1876 in my case. */
SHOW DATABASES;
USE leavitt_1876;
SHOW tables;

-- To create a new table:
Create Temporary Table my_first_table(
-- Has field called N, it will be an interger, can not be empty, can not be NULL
n INT UNSIGNED NOT NULL);

SHOW tables;
-- As a temp table you can't see it here.

SELECT * FROM my_first_table;
-- Table does exist and can be interacted with though!


-- followed by what you want to call it
-- followed by what in it ( data types and field names)

-- Let's throw some values into there:
INSERT INTO  my_first_table(n) VALUES (1), (2), (3), (10);

SELECT * FROM my_first_table;

-- Insert a new field into the table
-- to do this, we need to alter the table structure:
ALTER TABLE my_first_table ADD bonuscol VARCHAR(30);

SELECT * FROM my_first_table;

ALTER TABLE my_first_table DROP COLUMN bonuscol;

SELECT * FROM my_first_table;

-- SIDE NOTE: creating a table with more than one field
Create Temporary Table tbl2 (
col1 INT UNSIGNED NOT NULL,
col2 VARCHAR(30));

SELECT * FROM tbl2;

-- Inserting information continues to with the syntax from before:
INSERT INTO tbl2(col1,col2) VALUES
(3, 'hamsandwich'),
(8, 'pizza'),
(84, 'happy_friday');

SELECT * FROM tbl2;

-- DELETES TABLE: "I don't know what to tell you table 2, it's a rough world out there."
DROP TABLE tbl2;
SELECT * FROM tbl2; -- GONE FOREVER***!!!!

-- COPY TABLE:
CREATE TEMPORARY TABLE chipotle_copy(
SELECT * FROM chipotle.orders);

SELECT * FROM chipotle_copy;

-- Let's create a new field here:
ALTER TABLE chipotle_copy ADD quant_plus INT;
-- sanity check: let's see that it exists
SELECT * FROM chipotle_copy LIMIT 3;
-- (yes, and it's full of nulls)
UPDATE chipotle_copy SET quant_plus = quantity + 1;

SELECT * FROM chipotle_copy LIMIT 3;

SELECT quantity, quant_plus FROM chipotle_copy;
ALTER TABLE chipotle_copy DROP COLUMN quantity;
SELECT quant_plus FROM chipotle_copy;
SELECT * FROM chipotle_copy LIMIT 3;


