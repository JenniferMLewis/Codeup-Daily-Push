-- Is how we make comments in MySQL

-- I want to see the sections in the LIbrary
--the sections are what we may describe as schema, or database.alter

--Case isn't mandatory, BUT is consider good protocol, please use it.

SHOW DATABASES;
--We can see our Databases, remember your Semi-colon, think of it like PHP, you NEED it.

SELECT * FROM mysql.user;
-- Select Everything
-- From database/schema mysql
-- From table user

--How to see what's in a DB
--In CLI, we would change directories into our location (cd), we would list contents (ls)
--In MySQL

USE mysql;
--Command Line Interface (CLI) equivelant cd

SHOW TABLES;
--CLI equivelant ls
--Since we're in mysql db, we can just use
SELECT * FROM user;

-- I got lost in the Library, where am I?
SELECT database();
-- Will return which database you're currently in.

SHOW CREATE DATABSE fruits_db;
-- I want to know details about creations of fruits-db
-- SHOW command
-- the details of the create command
-- for the database (schema) fruits_db

SHOW DATABASES;
USE chipotle;
SHOW TABLES;
--Structure of a MySQL Database:
-- inside the database exists a Schema (databases)
--these databases provide a structure for tables

--Tables:
SELECT * FROM orders LIMIT 5;

-- So what's in a table?
--each cell of data in a table is exactly that: data
--each piece of datum has an inherent type
-- that type defines how it can interact and if it can belong in that field
-- interchangable terms in sq: columns and fields

--Tables in sql have some very specific rules about how they are created:
-- Firstly, they must contain a primary key
-- Null (No entered Value, different from NaN and 0)
-- nan (Not A Number)
-- primary keys have to be unique, can't be null, and there can be one

SHOW CREATE TABLE orders;
--shows command utilised to created that specific table, will show the specific code to create each value
-- signed vs unsigned - the use of the word sign is meaning mathmatically. Unsigned is only 0 to 4,294,967,295 Signed -2,147,483,648 to 2,147,483,647
-- Boolean 0 is False 1 is True. MySQL has no native support for boolean values, it uses TINYINT data type that goes from -128 to 127 and treats 0 as False and 1 as True. Other database management systems will vary in how they ahndle boolean values.

DESCRIBE orders;



-- CRUD
-- Create, Read, Update, Delete
-- DDL: Data Definition Language: Create, Update, Delete
-- DML: Data Manipulations Language: Read! <-- Our bread and butter?!

-- SELECT is the primary read statement that we will be using

-- SELECT (bring me information)
-- __subject__ (field names, computations, * , etc.)
-- FROM (what table do you want this informatoin from is it from a table?)
-- __source__ (either with a dot notation or living inside of a schema ie: database.table or just table)

SHOW DATABASES;

--SELECT (*: every field) FROM the schema named chipotle, and the table named orders inside chipotle.
/* dslkajflskdjf
comments
out
Multiple
Lines */
-- CMD + / Will comment out a line in SQL and Python!
SELECT * FROM chipotle.orders;

-- seclect only specific fields?
SELECT name FROM fruits;
-- more than one?
SELECT id, name FROM fruits;
USE chipotle;
SELECT * FROM orders;

-- Want something specitic??
-- Give me everything in the Fruits table where the name field matches the string Mango
SELECT * FROM fruits WHERE name = 'mange';
-- DISTINCT will give us unique values in a field
SELECT DISTINCT name FROM fruits;
SELECT DISTINCT name, quantity, FROM fruits;
SELECT * FROM fruits WHERE quantity > 2;
SELECT * FROM fruits WHERE quantity >= 2;

/* comparison operators:
= equals
!= Not equal, <> Not equal
< Less than
> Greated than
<= Less than or equal to
>= Greater or and equal to
BETWEEN __value1__ AND __value2__ greater than (up to value2) or equal to value1, AND less than (up to value1) or equal to value2. */

SELECT 'this is some output!';
-- functions like Print()
SELECT 2=2;
-- Will return 1, boolean meaning TRUE
SELECT 2=3;
-- Will return 0, boolean meaning FALSE
SELECT 2+3;
-- Will return SUM of 2 and 3, so 5
SELECT 2=2, 2+3, 2 BETWEEN 3 AND 5;
-- Will return 1 | 5 | 0 <--- Boolean | SUM | boolean

-- aliasing:
SELECT 2=2 AS 'equivalency_demo';
-- Or
SELECT 2=2 AS equivalency_demo;

SELECT name AS fruit_type FROM fruits;
-- Makes a list of fruit_names into the table fruit_type so you don't have to keep referencing the long way

/* Can do More Exercises from SQL if feeling ahead. */

-- % is the wildcard for data entries, not * . So items would be wildcarded like '%vague_idea%'. It would give "This_is_a_vague_idea" or "I_only_have_vague_ideas" or "vague_ideas_not here".

--Clauses:
--Clauses are how we get specifically what we want(usually a single gield or a combination of fields)

-- WHERE: Give me results specifally under X conditions

-- ORDER BY: Sort my results specifally to my needs

-- LIMIT: Only give me some of the results back

-- SHOW me what database/schemas I have available
SHOW DATABASES;
-- USE the chipotle schemas
USE chipotle;
-- SHOW what tables are available inside the chipotle database.
SHOW TABLES;
-- tell me what fields I have inside the orders table.
DESCRIBE orders;

-- A good way to get a preview on our table:
-- LIMIT
SELECT * FROM orders LIMIT 5;
-- Gives a hard stop after the first 5 entries.

-- If I want to narrow down results we can use WHERE
-- WHERE comes at the end of a select statement, and it calls:

-- A few differe ways to use this so far:
-- We need to specify what we want to narrow down.
-- Establish dquivalency : = 
-- LIKE, compare string values
-- BETWEEN, inclusive range
-- inequality operators: <,>,<=,>=
-- NOT EQUAL , != or <>

-- Give me everything in orders
-- specifically, everthis that has a tomato in the item name
SELECT * FROM orders WHERE item_name LIKE '%tomato%';
-- Just the distinct entries with tomato in their name.
SELECT DISTINCT item_name FROM orders WHERE item_name LIKE '%tomato%';


/* STRUCTURE:
SELECT - Do the things, pull the info
WHAT everything: * , some specific fields, some way of sorting data
At a Specific Field (DISTINCT)
FROM - Where this is coming from
Stipulations? Do we want a *clause* to narrow this information down?

Use a numerical comparision:
Give me every choice_description, \  
But only if there was more than 3 ordered */
SELECT choice_description FROM orders WHERE quantity > 3;
--alternatively?
SELECT
choice_description AS choice
FROM orders
WHERE quantity > 3
AND choice_description <> 'nan';

-- Nesting: Can keep nesting, order is in the way it's written so it will run as you want to narrow down if written that way.
SELECT *
FROM orders
WHERE quantity > 2
AND (
item_name LIKE '%tomato%'
OR choice_description LIKE '%rice%'
);

ORDER BY: How we sort our results
SELECT *
FROM orders
Where quantity > 2
AND (
item_name LIKE '%tomato%'
OR choice_description LIKE '%rice%
ORDER BY quantity DESC
);

-- LIMIT and OFFSET. LIMIT is how many items will show up at a time, OFFSET then tells it WHERE in the entries you wan to start.

