f-string :  informs Python that the string is formatted and will run anything inside the curly brackets
f'3 + 4 is {3 + 4}'
becomes
"3 + 4 is 7"

Python is VERY case sensitive and formatting (indent and the like) sensitive.

using VAR.strip() will remove whitespace so  "   hi!    ".strip() will give you "hi!"
So you can check for white space with VAR == VAR.strip() if False, there is whitespace.

Escape out in a line \
Escape out in a string \n
Escape out = means removing formatting (of sorts) in this case means we can continue on the next line without issue
ex: 'yes it\'s tuesday' will give you yes it's tuesday



CONTROL STRUCTURES:
Dictate /what/ your code does depending on different conditions. They are essential for creating code with any type of robustness or flexibility.

Today's control structures:
- Conditionals: A condition outlines where the code should go next based on a condition. Just liek we utilised clauses such as WhERE in SQL, in the riverflow of a python script we can veer into different canals with our primary tool of the IF statement
- Loops: A Loop, congruently similar in it's naming convention, continues to go through until all conditions are met.

If Statements: if condition: do thing
                else: do different thing
          or 
                if condition: do thing
                elif condition 2: do a different thing
                can continue on as needed with more elif
                else: do this thing instead
                
Loops: For and While
While does until a condition is no longer valid
For does for everything
      for i* in itr*: do a thing
      * i and element in itr
      * itr and iterable
      
      n in range (10)
      0,1,2,3,4,5,6,7,8,9 Where each eleiment is an n during the loop
      
      for i in [apple, pear, banana]
      i runs conditions for each value individually.
      
 While condition*: do thing (until condition is False)
 * YOU HAVE TO CREATE A BREAK IF NOT IT WILL GO ON TO INFINITY AND BEYOND
  - Make sure you alter the condition inside the loop
  -- if the condition reads true everytime the loop cycles, it will never stop.
  
  # If statements:
  # If True, do thing.
If True:
  print('hi!')
  
If False:
  print('hi!')
-- Will print only the top one, since nothing is True?
  # else, elif:
  # If the parameters of my first things don't work, do another thing
is_tuesday = True

if is_tuesday:
  print("Yes, it's tuesday!")
else:
  print("Boring Day"
  
today = 'tuesday'

if today == 'tuesday':
  print("Yes, it's tuesday!")
elif today == 'friday' or today == 'saturday' or today == 'sunday':
  print("Yay!")
else:
  print("Boring Day")
  #Can add more if
today = 'tuesday" second_thing = "nearly five"
if today == 'tuesday':
  print("Yes, it's tuesday!")
elif today == 'friday':
  print("Friyay!")
if second_thing == "nearly five"
  print("go home!")
elif today == 'saturday' or today == 'sunday':
  print("Yay!")
else:
  print("Boring Day")
 -- Will return Yes, it's tuesday! go home!
  

 
 VOCAB
 ---------
 calling/invoking: Executing a function.
    ? after a function name gets the docstring help(function) gets more documentation about the function
        ex: len?
            help(len)
    invoking a function invloves adding () to the end of it.
    any given function may or may not have required arguements with it.
    
Arguments and Parameteres:
    Nuianced Difference
      Arguement: item being fed into the parenthesis (when the function is being called)
        ex: len('Hello') ---> Hello is arguement
      Parameters: The thing being defined into the function that will be called when we use the function as a paramater (think lava/magma situation)
Methods: functions that exist as a ((Will get back to this, screen has scrolled.))

def function_name():
    print('Hello, World!')
    ****FUNCTIONS HAVE TO HAVE A RETURN****
    
    ex: def increment(n):
          return n+1
  Function ends once it hits a Return.
  ** WRITING A DOCSTRING for your function: 
  '''
  my_extra_stuff:
  parameteres: x, a numtype variable
  return x, a version of x incremented by 10
  '''
  *************** ALWAYS DOCUMENT YOUR FUNCTIONS, DON'T TRUST YOURSELF TO REMEMBER WHAT YOU DID YESTERDAY, LET ALONE DAYS OR WEEKS AGO, AND HELP OTHERS OUT.
  
  
  Keyword arguments(kwargs) vs positional arguements
    Keyword have a default type, Keyword are optional input
    Positional is required input
    
    ex: def useless_funct(x, y='hello leavitt'):
#        x is positional, y is keyword
            if y == 'hello leavitt':
              print('ah, it's so good to see you')
            return x
            
          useless_funct(8) fills in 8 for x and y is still default
          useless_funct(8, y='hey') <-- good idea to reference keyword arguments, but it can function as (8, 'hey')
  
  POPQUIZ
    def popquiz(y=8):
        return y
        y += 2
        return
        ---REMEMBER: Stops at first return---
    
      def multi_return(y=8):
        y -= 6
        hello_leavitt == "hi!'
        return y, hello_leavitt
        ----returns two results, as a tuple)
      
      def if_returns(x, y=8)
        x+y = z
        if z % 2 == 0:
          print('You made an even number!')
          return z
        elif z % 2 == 1:
          print('You made an odd number!')
          return z
         else:
          print('What even are you??')
          return z
          
          
 LAMBDA:
  lambda functions: do something quick if we are going to use it once (so 'single-use*' shorthand definition) *can be used more than once, but make a def if using a lot.
    lambda x: x+1
    # structually -   x: thing we are feeding into the function, colon: instructions for that thing (the arguement X), the expression we want acted upon x.
    # for this. Lambda takes x, and add one.
    
    import os
      os.getcwd() <-- Shows current directory
      os.listdir() <--- lists everything in the directory
     *Can import your own functions*
      import sample_module as sm
      
  User Created Functions are very useful for cleaning up your code, makes reading your code easier.
  
